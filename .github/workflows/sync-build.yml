name: Sync & Build AdbAutoPlayer

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 0 * * *"  # minuit UTC tous les jours

jobs:
  sync-and-build:
    runs-on: windows-latest
    
    steps:
      # 1. Vérifier le code du fork
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # 2. Synchroniser avec le repo original
      - name: Sync with upstream
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote add upstream https://github.com/AdbAutoPlayer/AdbAutoPlayer.git
          git fetch upstream
          git checkout main
          git merge upstream/main --no-edit
          git push origin main
        continue-on-error: true
      
      # 3. Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      # 4. Setup Go (requis pour Wails3)
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      
      # 5. Setup Node (requis pour Wails3)
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      # 6. Installer UV
      - name: Install UV
        run: |
          irm https://astral.sh/uv/install.ps1 | iex
          echo "$env:USERPROFILE\.local\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: powershell
      
      # 7. Installer Python avec UV
      - name: Install Python with UV
        run: |
          uv python install
        shell: powershell
      
      # 8. Installer les dépendances Python
      - name: Install Python dependencies
        run: |
          cd python
          uv sync --dev
        shell: powershell
      
      # 9. Installer Wails3
      - name: Install Wails3
        run: |
          go install github.com/wailsapp/wails/v3/cmd/wails3@latest
          echo "$env:USERPROFILE\go\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: powershell
      
      # 10. Vérifier les installations
      - name: Verify installations
        run: |
          Write-Host "Python version:"
          python --version
          Write-Host "`nGo version:"
          go version
          Write-Host "`nNode version:"
          node --version
          Write-Host "`nWails3 version:"
          wails3 version
        shell: powershell
      
      # 11. Builder l'executable avec le script officiel
      - name: Build Windows executable
        run: |
          .\.github\scripts\build_windows.ps1
        shell: powershell
      
      # 12. Vérifier la build
      - name: Check build output
        run: |
          Write-Host "Checking build output..."
          $BuildDir = "AdbAutoPlayer"
          
          if (Test-Path $BuildDir) {
            Write-Host "✅ Build successful! Contents:"
            Get-ChildItem -Path $BuildDir -Recurse | Select-Object -First 20 | ForEach-Object { Write-Host $_.FullName }
            
            # Vérifier que l'exe existe
            $exeFile = Join-Path $BuildDir "AdbAutoPlayer.exe"
            if (Test-Path $exeFile) {
              Write-Host "`n✅ Main executable found: $exeFile"
            } else {
              Write-Host "`n❌ Main executable not found!"
              exit 1
            }
            
            # Vérifier que le dossier binaries existe
            $binariesDir = Join-Path $BuildDir "binaries"
            if (Test-Path $binariesDir) {
              Write-Host "✅ Binaries folder found"
            } else {
              Write-Host "⚠️ Warning: Binaries folder not found!"
            }
          } else {
            Write-Host "❌ Build failed - AdbAutoPlayer directory not found"
            exit 1
          }
        shell: powershell
      
      # 13. Upload le dossier (GitHub Actions créera automatiquement un ZIP)
      - name: Upload complete build
        uses: actions/upload-artifact@v4
        with:
          name: AdbAutoPlayer-Windows
          path: AdbAutoPlayer/
          if-no-files-found: error
      
      # 14. Créer un ZIP pour les releases
      - name: Create release ZIP
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          Compress-Archive -Path AdbAutoPlayer -DestinationPath AdbAutoPlayer-Windows.zip -Force
        shell: powershell
      
      # 15. Créer une release automatique sur tag
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: AdbAutoPlayer-Windows.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}